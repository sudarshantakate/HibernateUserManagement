package com.service;

import java.util.List;
import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.config.HibernateConfig;
import com.entity.User;

public class Userserviceimpl implements UserService {

	SessionFactory sf = HibernateConfig.getSessionFactory();

//	public int generateUserId() {
//		int UserIdAutoGenerated = (int) (Math.random() * Math.pow(4, 8));
//		System.out.println("User ID : " + UserIdAutoGenerated);
//		return UserIdAutoGenerated;
//	}

	@Override
	public void addUser() {

		Session session = sf.openSession();
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter how many user you want to add:");
		int usercount = sc.nextInt();

		for (int i = 0; i < usercount; i++) {

			User user = new User();
			System.out.println("----------------------------------");
			// Task 1--Autoamte the generate andom ID
			// int userIdGenerate =generateUserId();
			System.out.println("Enter User ID: ");
			user.setUid(sc.nextInt());
			System.out.println("Enter User Name:");
			user.setUname(sc.next());
			System.out.println("Enter User Address: ");
			user.setUaddress(sc.next());
			System.out.println("Enter User Email ID: ");
			user.setEmail(sc.next());
			System.out.println("Enter User Password: ");
			user.setPassword(sc.next());
			System.out.println("Enter Your Age: ");
			user.setAge(sc.nextInt());
			System.out.println("Enter User Salarry: ");
			user.setSalarry(sc.nextDouble());
			System.out.println("----------------------------------");

			session.save(user);
			session.beginTransaction().commit();
			System.out.println("User Data saved!!");
		}

	}

	@Override
	public void displaySingleUser() {
		// task 2--in the basis of id fetch user and check email and password.
		Session session = sf.openSession();
		Scanner sc = new Scanner(System.in);

		System.out.println("----------------------------------");
		System.out.println("Enter User ID: ");
		int id = sc.nextInt();
		System.out.println("Enter Email ID:");
		String email = sc.next();
		System.out.println("Enter Password: ");
		String password = sc.next();
		System.out.println("----------------------------------");
		User user = session.get(User.class, id);
		if (user != null) {
			if (email.equals(user.getEmail()) && password.equals(user.getPassword())) {
				System.out.println("---Display User Data---");
				System.out.println(user);
			}
		} else {
			System.out.println("Invalid Credentials!!");
		}

	}

	@Override
	public void updateUser() {
		Session session = sf.openSession();
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter User ID: ");
		int id = sc.nextInt();

		User user = session.get(User.class, id);

		if (user != null) {
			boolean flag = true;
			while (flag) {
				System.out.println("----------------------------------");
				System.out.println("1. Update Name");
				System.out.println("2. Update Address");
				System.out.println("3. Update Email ID");
				System.out.println("4. Update Age");
				System.out.println("5. Exit");
				System.out.println("----------------------------------");
				System.out.print("Choose correct option: ");
				int ch = sc.nextInt();

				switch (ch) {
				case 1:
					System.out.print("Enter Name to update: ");
					user.setUname(sc.next());
					System.out.println("Name Updated Successfully: " + user.getUname());
					break;
				case 2:
					System.out.print("Enter Address to update: ");
					user.setUaddress(sc.next());
					System.out.println("Address Updated Successfully: " + user.getUaddress());
					break;
				case 3:
					System.out.print("Enter Email ID to update: ");
					user.setEmail(sc.next());
					System.out.println("Email ID Updated Successfully: " + user.getEmail());
					break;
				case 4:
					System.out.print("Enter Age to update: ");
					user.setAge(sc.nextInt());
					System.out.println("Age Updated Successfully: " + user.getAge());
					break;
				case 5:
					flag = false;
					break;
				default:
					System.out.println("Invalid Choice!!");
					break;
				}
			}

			session.update(user); // update instead of save
			session.beginTransaction().commit(); // commit transaction
			System.out.println("All changes saved successfully!");
		} else {
			System.out.println("User ID not found!!");
		}

		session.close();
	}

	@Override
	public void deleteUser() {

		Session session = sf.openSession();
		Scanner sc = new Scanner(System.in);

		System.out.println("----------------------------------");
		System.out.println("Enter User ID: ");
		int id = sc.nextInt();
		System.out.println("Enter Email ID:");
		String email = sc.next();
		System.out.println("Enter Password: ");
		String password = sc.next();
		System.out.println("----------------------------------");
		User user = session.get(User.class, id);

		if (user != null) {
			System.out.println("User Found: " + user);
			System.out.print("Are you sure you want to delete this user? (yes/no): ");
			String confirm = sc.next();
			if (confirm.equalsIgnoreCase("yes")) {
				session.delete(user);
				session.beginTransaction().commit();
				System.out.println("User deleted Successfully!!");
			} else {
				System.out.println("Deletion Cancle!!");
				session.beginTransaction().rollback();
			}

		} else {
			System.out.println("User Not found!!");
		}
		session.close();

	}

	@Override
	public void sortUsersBySalary() {
		Session session = sf.openSession();
		List<User> userList = session.createQuery("WHERE USER ORDER BY SALARY ASC", User.class).list();

		if (userList.isEmpty()) {
			System.out.println("No User Found!!");
		} else {
			System.out.println("User Salary by (LOW--> HIGH): ");
			for (User u : userList) {
				System.out.println(u);
			}
		}
		session.close();

	}

}
